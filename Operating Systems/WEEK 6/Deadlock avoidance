#include <stdio.h>
#include <stdbool.h>

#define N 5  // Number of processes
#define M 3  // Number of resource types

int main() {
    int Allocation[N][M] = {
        {0, 1, 0},
        {2, 0, 0},
        {3, 0, 2},
        {2, 1, 1},
        {0, 0, 2}
    };

    int Max[N][M] = {
        {7, 5, 3},
        {3, 2, 2},
        {9, 0, 2},
        {2, 2, 2},
        {4, 3, 3}
    };

    int Available[M] = {3, 3, 2};

    int Need[N][M];
    bool Finish[N] = {false};

    // Calculate Need matrix
    for (int i = 0; i < N; i++)
        for (int j = 0; j < M; j++)
            Need[i][j] = Max[i][j] - Allocation[i][j];

    int safeSeq[N];
    int count = 0;

    while (count < N) {
        bool found = false;
        for (int p = 0; p < N; p++) {
            if (!Finish[p]) {
                int j;
                for (j = 0; j < M; j++)
                    if (Need[p][j] > Available[j])
                        break;

                if (j == M) {
                    for (int k = 0; k < M; k++)
                        Available[k] += Allocation[p][k];
                    safeSeq[count++] = p;
                    Finish[p] = true;
                    found = true;
                }
            }
        }
        if (!found)
            break; // Deadlock
    }
    if (count == N) {
        printf("System is in a safe state.\nSafe sequence: ");
        for (int i = 0; i < N; i++)
            printf("P%d ", safeSeq[i]);
        printf("\n");
    } else {
        printf("System is in a deadlock state.\n");
        printf("Processes involved in deadlock: ");
        for (int i = 0; i < N; i++)
            if (!Finish[i])
                printf("P%d ", i);
        printf("\n");
    }

    return 0;
}

OUTPUT:
System is in a safe state.
Safe sequence: P1 P3 P4 P0 P2 
