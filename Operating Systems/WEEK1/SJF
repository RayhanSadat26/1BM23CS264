#include <stdio.h>

int main() {
    int n, temp;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int at[n], bt[n], ct[n], tat[n], wt[n], pid[n];

    for (int i = 0; i < n; i++) {
        pid[i] = i + 1;
        printf("Enter Arrival Time and Burst Time for Process %d: ", pid[i]);
        scanf("%d %d", &at[i], &bt[i]);
    }

    // Sorting based on Arrival Time and then Burst Time
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (at[i] > at[j] || (at[i] == at[j] && bt[i] > bt[j])) {
                // Swap AT
                temp = at[i]; at[i] = at[j]; at[j] = temp;
                // Swap BT
                temp = bt[i]; bt[i] = bt[j]; bt[j] = temp;
                // Swap PID
                temp = pid[i]; pid[i] = pid[j]; pid[j] = temp;
            }
        }
    }

    int completed[n], current_time = 0, total = 0;
    for (int i = 0; i < n; i++) completed[i] = 0;

    while (total < n) {
        int idx = -1, min_bt = 1e9;
        for (int i = 0; i < n; i++) {
            if (at[i] <= current_time && !completed[i]) {
                if (bt[i] < min_bt) {
                    min_bt = bt[i];
                    idx = i;
                }
            }
        }

        if (idx != -1) {
            ct[idx] = current_time + bt[idx];
            tat[idx] = ct[idx] - at[idx];
            wt[idx] = tat[idx] - bt[idx];
            completed[idx] = 1;
            current_time = ct[idx];
            total++;
        } else {
            current_time++;
        }
    }

    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\n", pid[i], at[i], bt[i], ct[i], tat[i], wt[i]);
    }

    return 0;
}
OUPUT:
Enter the number of processes: 4
Enter Arrival Time and Burst Time for Process 1: 0 7
Enter Arrival Time and Burst Time for Process 2: 2 4
Enter Arrival Time and Burst Time for Process 3: 4 1
Enter Arrival Time and Burst Time for Process 4: 5 4

Process	AT	BT	CT	TAT	WT
P1	    0	7	7	7	0
P2	    2	4	12	10	6
P3	    4	1	8	4	3
P4	    5	4	16	11	7

#include <stdio.h>

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int at[n], bt[n], rt[n], ct[n], tat[n], wt[n], pid[n];

    for (int i = 0; i < n; i++) {
        pid[i] = i + 1;
        printf("Enter Arrival Time and Burst Time for Process %d: ", pid[i]);
        scanf("%d %d", &at[i], &bt[i]);
        rt[i] = bt[i]; // remaining time initially equals burst time
    }

    int completed = 0, current_time = 0, min_rt, shortest = -1, finish_time;
    int is_process_found;

    while (completed != n) {
        min_rt = 1e9;
        is_process_found = 0;

        for (int i = 0; i < n; i++) {
            if (at[i] <= current_time && rt[i] > 0 && rt[i] < min_rt) {
                shortest = i;
                min_rt = rt[i];
                is_process_found = 1;
            }
        }

        if (!is_process_found) {
            current_time++;
            continue;
        }

        rt[shortest]--; // Execute process for 1 unit
        current_time++;

        if (rt[shortest] == 0) {
            completed++;
            finish_time = current_time;
            ct[shortest] = finish_time;
            tat[shortest] = ct[shortest] - at[shortest];
            wt[shortest] = tat[shortest] - bt[shortest];
        }
    }

    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t%d\t%d\n", pid[i], at[i], bt[i], ct[i], tat[i], wt[i]);
    }

    return 0;
}
OUTPUT:
Enter the number of processes: 3
Enter Arrival Time and Burst Time for Process 1: 0 7
Enter Arrival Time and Burst Time for Process 2: 2 4
Enter Arrival Time and Burst Time for Process 3: 4 1

Process	AT	BT	CT	TAT	WT
P1	    0	7	12	12	5
P2	    2	4	8	6	2
P3	    4	1	5	1	0

